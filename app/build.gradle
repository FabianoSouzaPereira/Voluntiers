plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'kotlin-parcelize'
    id 'androidx.navigation.safeargs.kotlin' version '2.7.5'
    id 'com.google.gms.google-services' version '4.3.15'
}

ext {
    mockkVersion = '1.13.8'
    corektxVersion = '1.12.0'
    appcompatVersion = '1.6.1'
    constraintlayoutVersion = '2.1.4'
    navigation = '2.7.5'
    navigationUIktxVersion = '2.5.2'
    livedataktxVersion = '2.6.2'
    viewmodelktxVersion = '2.6.2'
    runtimektxVersion = '2.6.2'
    materialVersion = '1.10.0'
    annotationVersion = '1.5.0'
    retrofitVersion = '2.9.0'
    convertergsonVersion = '2.9.0'
    lifecycle_version = '2.7.0-rc01'
    jUnit5Version = '5.8.1'
    jUnit5kotlin = '1.9.22'
    robolectricVersion = '4.11.1'
    mannodermaus_junit5Version = '1.7.2'
    androidx_archVerson = '2.2.0'
    preferencektxVersion = '1.2.1'
    retrofit2Version = '2.9.0'
    dagger2Version = '2.49'
    legacy_support_v4Version = '1.0.0'
    preference_ktxVersion = '1.2.1'
    firebase_analytics_ktxVersion = '21.5.0'
    firebase_auth_ktxVersion = '22.3.0'
    firebase_firestore_ktxVersion = '24.10.0'
    firebase_inappmessaging_ktxVersion = '20.4.0'
    firebase_inappmessaging_display_ktxVersion = '20.4.0'
    shimmerVersion = '0.5.0'
}

// Carregando as propriedades do arquivo keystore.properties
def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

def firebasePropertiesFile = rootProject.file("firebase.properties")
def firebaseProperties = new Properties()
firebaseProperties.load(new FileInputStream(firebasePropertiesFile))
def idClientWeb = firebaseProperties['IDClientWeb']
def secretKeyWeb = firebaseProperties['SecretKeyWeb']
def apiWEB = firebaseProperties['ApiWEB']
def idAPP = firebaseProperties['IDAPP']


android {
    namespace 'com.fabianodev.voluntiers'
    compileSdk 34

    signingConfigs {
        release {
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
        }
    }

    defaultConfig {
        applicationId "com.fabianodev.voluntiers"
        minSdk 26
        targetSdk 34
        versionCode 1
        versionName "1.0.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
        freeCompilerArgs += [
                "-Xjvm-default=all",
        ]
    }
    buildFeatures {
        viewBinding true
    }

    testOptions {
        unitTests.includeAndroidResources = true
        unitTests.all {
            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
                outputs.upToDateWhen { false }
                showStandardStreams = true
            }
            useJUnitPlatform()
            testLogging {
                showStandardStreams = true
            }

        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "androidx.legacy:legacy-support-v4:$legacy_support_v4Version"
    implementation "androidx.fragment:fragment-ktx:$preferencektxVersion"
    implementation "androidx.core:core-ktx:$corektxVersion"
    implementation "androidx.appcompat:appcompat:$appcompatVersion"
    implementation "com.google.android.material:material:$materialVersion"
    implementation "androidx.constraintlayout:constraintlayout:$constraintlayoutVersion"
    implementation "androidx.navigation:navigation-fragment-ktx:$navigation"
    implementation "androidx.navigation:navigation-ui-ktx:$navigation"
    implementation "androidx.preference:preference-ktx:$preference_ktxVersion"

    /******** LifeCycle ********/
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$livedataktxVersion"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$viewmodelktxVersion"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$runtimektxVersion"
    // Saved state module for ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:$lifecycle_version"
    // optional - helpers for implementing LifecycleOwner in a Service
    implementation "androidx.lifecycle:lifecycle-service:$lifecycle_version"
    // optional - ProcessLifecycleOwner provides a lifecycle for the whole application process
    implementation "androidx.lifecycle:lifecycle-process:$lifecycle_version"
    // optional - ReactiveStreams support for LiveData
    implementation "androidx.lifecycle:lifecycle-reactivestreams-ktx:$lifecycle_version"

    /******** DAGGER ********/
    implementation "com.google.dagger:dagger:$dagger2Version"
    implementation 'androidx.preference:preference:1.2.1'
    kapt "com.google.dagger:dagger-compiler:$dagger2Version"

    implementation "com.facebook.shimmer:shimmer:$shimmerVersion"

    /** Retrofit  **/
    implementation "com.squareup.retrofit2:retrofit:$retrofit2Version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit2Version"

    /* Dependency for the Firebase */
    implementation "com.google.firebase:firebase-analytics-ktx:$firebase_analytics_ktxVersion"
    implementation "com.google.firebase:firebase-auth-ktx:$firebase_auth_ktxVersion"
    implementation "com.google.firebase:firebase-firestore-ktx:$firebase_firestore_ktxVersion"
    /* Messages in app */
    implementation "com.google.firebase:firebase-inappmessaging-ktx:$firebase_inappmessaging_ktxVersion"
    /* Show in app */
    implementation "com.google.firebase:firebase-inappmessaging-display-ktx:$firebase_inappmessaging_display_ktxVersion"

    /******** Tests ********/
    testImplementation "org.junit.jupiter:junit-jupiter:$jUnit5Version"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$jUnit5Version"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$jUnit5Version"
    testImplementation "org.junit.jupiter:junit-jupiter-engine:$jUnit5Version"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit5:$jUnit5kotlin"
    testImplementation "org.robolectric:robolectric:$robolectricVersion"
    testImplementation "io.mockk:mockk:$mockkVersion"
    testImplementation "io.mockk:mockk-android:$mockkVersion"
    testImplementation "io.mockk:mockk-agent:$mockkVersion"
    androidTestImplementation "io.mockk:mockk-android:$mockkVersion"
    androidTestImplementation "io.mockk:mockk-agent:$mockkVersion"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$mannodermaus_junit5Version"
    androidTestImplementation "de.mannodermaus.junit5:android-test-core:$mannodermaus_junit5Version"
    androidTestImplementation "de.mannodermaus.junit5:android-test-runner:$mannodermaus_junit5Version"
    androidTestImplementation "de.mannodermaus.junit5:android-test-foundation:$mannodermaus_junit5Version"
    /* Depended od android component */
    testImplementation "androidx.arch.core:core-testing:$androidx_archVerson"
}